"""In step 4.2.1 of the algorithm in [Ma et al.

2018], The CAT is computed by using the following steps:
1. Create a Tetrahedron Mesh from all the points on the surface mesh of both the objects and the container as the input points.
2. Use onlty those tetrahedrons that constructed of points from multiple objects.
3. Compute the chordal axis of each tetrahedron.
4. Compute the chordal axis of the whole object by taking the union of all the chordal axis of the tetrahedrons.
"""
# %%

# %%
import io
from contextlib import redirect_stdout

import numpy as np
import pyvista as pv
import tetgen

from irregular_object_packing.cat.tetra_cell import compute_cat_faces

# from utils import angle_between, sort_points_clockwise
CDT_DEFAULTS = {
    "steinerleft": 0,
    "minratio": 10.0,
    "quality": False,
    "opt_scheme": 0,
    "switches": "O/0Q",
    "quiet": True,
}


def compute_cdt(meshes: list[pv.PolyData], tetgen_kwargs=None) -> pv.UnstructuredGrid:
    """Compute the constrained Delaunay triangulation of the meshes

    Args:
        meshes (list[pv.PolyData]): list of meshes

    Returns:
        pv.PolyData: constrained Delaunay triangulation
    """
    tetgen_kwargs = tetgen_kwargs or CDT_DEFAULTS
    mesh_sum = pv.PolyData()
    for mesh in meshes:
        mesh_sum.merge(mesh, merge_points=False, inplace=True)

    # mitigate the annoying output of tetgen generated by the -D flag
    f = io.StringIO()
    with redirect_stdout(f):
        mesh = tetgen.TetGen(mesh_sum)
        mesh.tetrahedralize(order=1, **tetgen_kwargs)

    return mesh.grid


def compute_cat_cells(
    object_meshes: list[pv.PolyData],
    container: pv.PolyData,
    obj_coords: list[np.ndarray],
    tetgen_kwargs: dict,
):
    """Compute the CAT cells of the objects in the list and the container. First a
    Tetrahedral mesh is created from the pointcloud of all the objects points and the
    container points. Then, for each tetrahedron that has points from at least 2
    different objects, the faces of the CAT mesh are computed.

    Args:
        - object_points_list: a list of point clouds which define the surface meshes of the objects
        - container_points: a point cloud of surface mesh of the container

    Returns:
        - dictionary of the CAT cells for each object.
    """

    tetmesh = compute_cdt(object_meshes + [container], tetgen_kwargs)

    # The point sets are sets(uniques) of tuples (x,y,z) for each object, for quick lookup
    # NOTE: Each set in the list might contain points from different objects.
    obj_point_sets = [set(map(tuple, obj.points)) for obj in object_meshes] + [
        set(map(tuple, container.points))
    ]

    # Each cat cell is a list of faces, each face is a list of points
    compute_cat_faces(tetmesh, obj_point_sets, obj_coords)

    del tetmesh
